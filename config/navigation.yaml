bt_navigator:
  ros__parameters:
    log_level: DEBUG
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ['navigate_to_pose', 'navigate_through_poses']
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    default_bt_xml_filename: "/home/nomeer/NoMeEr/Robotics-Software/ros2/Projects/nav2bench/src/nav2bench/config/behavior_trees/pose.xml"

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []
    # plugin_lib_names:
    #  - nav2_behavior_tree_nodes  # This is required
    #  - nav2_compute_path_to_pose_action_bt_node
    #  - nav2_compute_path_through_poses_action_bt_node
    #  - nav2_follow_path_action_bt_node
    #  - nav2_back_up_action_bt_node
    #  - nav2_spin_action_bt_node
    #  - nav2_wait_action_bt_node
    #  - nav2_clear_costmap_service_bt_node
    #  - nav2_is_stuck_condition_bt_node
    #  - nav2_goal_reached_condition_bt_node
    #  - nav2_goal_updated_condition_bt_node
    #  - nav2_initial_pose_received_condition_bt_node
    #  - nav2_reinitialize_global_localization_service_bt_node
    #  - nav2_rate_controller_bt_node
    #  - nav2_distance_controller_bt_node
    #  - nav2_speed_controller_bt_node
    #  - nav2_truncate_path_action_bt_node
    #  - nav2_goal_updater_node_bt_node
    #  - nav2_recovery_node_bt_node
    #  - nav2_pipeline_sequence_bt_node
    #  - nav2_round_robin_node_bt_node
    #  - nav2_transform_available_condition_bt_node
    #  - nav2_time_expired_condition_bt_node
    #  - nav2_distance_traveled_condition_bt_node
    #  - nav2_single_trigger_bt_node
    #  - nav2_is_battery_low_condition_bt_node
    #  - nav2_navigate_through_poses_action_bt_node
    #  - nav2_navigate_to_pose_action_bt_node
    #  - nav2_remove_passed_goals_action_bt_node
    #  - nav2_planner_selector_bt_node
    #  - nav2_controller_selector_bt_node
    #  - nav2_goal_checker_selector_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]
    #controller_plugins:
    #  ["MPPI", "DWB_RSC", "RPP", "DWB", "RPP_RSC"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    
    # DWB parameters
    # ROS2 Controller Parameters and Evaluation Criteria

    # Controller 1: DWB_RSC
    #FollowPath:
    #  plugin: "dwb_core::DWBLocalPlanner"
    #  debug_trajectory_details: True
    #  min_vel_x: 0.0
    #  min_vel_y: 0.0
    #  max_vel_x: 0.22
    #  max_vel_y: 0.0
    #  max_vel_theta: 2.84
    #  min_speed_xy: 0.0
    #  max_speed_xy: 0.22
    #  min_speed_theta: 0.0
    #  # Add high threshold velocity for turtlebot 3 issue.
    #  # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    #  acc_lim_x: 2.5
    #  acc_lim_y: 0.0
    #  acc_lim_theta: 3.2
    #  decel_lim_x: -2.5
    #  decel_lim_y: 0.0
    #  decel_lim_theta: -3.2
    #  vx_samples: 20
    #  vy_samples: 5
    #  vtheta_samples: 20
    #  sim_time: 1.7
    #  linear_granularity: 0.05
    #  angular_granularity: 0.025
    #  transform_tolerance: 0.2
    #  xy_goal_tolerance: 0.25
    #  trans_stopped_velocity: 0.25
    #  short_circuit_trajectory_evaluation: True
    #  stateful: True
    #  critics: ["RotateToGoal",
    #            "Oscillation",
    #            "BaseObstacle",
    #            "GoalAlign",
    #            "PathAlign",
    #            "PathDist",
    #            "GoalDist"]
    #  BaseObstacle.scale: 0.02
    #  PathAlign.scale: 32.0
    #  PathAlign.forward_point_distance: 0.1
    #  GoalAlign.scale: 24.0
    #  GoalAlign.forward_point_distance: 0.1
    #  PathDist.scale: 32.0
    #  GoalDist.scale: 24.0
    #  RotateToGoal.scale: 32.0
    #  RotateToGoal.slowing_factor: 5.0
    #  RotateToGoal.lookahead_time: -1.0
    #  publish_cost_grid_pc: True
    

    # Controller 2: RPP
    #FollowPath:
    #  plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #  desired_linear_vel: 0.26
    #  lookahead_dist: 0.6
    #  min_lookahead_dist: 0.3
    #  max_lookahead_dist: 0.9
    #  lookahead_time: 1.5
    #  rotate_to_heading_angular_vel: 1.8
    #  transform_tolerance: 0.1 #0.2
    #  use_velocity_scaled_lookahead_dist: false
    #  min_approach_linear_velocity: 0.05
    #  approach_velocity_scaling_dist: 0.6
    #  use_collision_detection: true
    #  max_allowed_time_to_collision_up_to_carrot: 1.0
    #  use_regulated_linear_velocity_scaling: true
    #  use_cost_regulated_linear_velocity_scaling: false
    #  regulated_linear_scaling_min_radius: 0.9
    #  regulated_linear_scaling_min_speed: 0.18
    #  use_fixed_curvature_lookahead: false
    #  curvature_lookahead_dist: 1.0
    #  use_rotate_to_heading: true
    #  allow_reversing: false
    #  rotate_to_heading_min_angle: 0.785
    #  max_angular_accel: 3.2
    #  max_robot_pose_search_dist: 10.0
    #  cost_scaling_dist: 0.3
    #  cost_scaling_gain: 1.0
    #  inflation_cost_scaling_factor: 10.0
    #  use_interpolation: false

    # Controller 3: DWB
    #FollowPath:
    #  plugin: "dwb_core::DWBLocalPlanner"
    #  debug_trajectory_details: True

    # velocities
    #  min_vel_x: 0.05
    #  min_vel_y: 0.0
    #  max_vel_x: 0.30
    #  max_vel_y: 0.0
    #  max_vel_theta: 1.5
    #  min_speed_xy: 0.0
    #  max_speed_xy: 0.30
    #  min_speed_theta: 0.0
    #  # Add high threshold velocity for turtlebot 3 issue.
    #  # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75

    # acceleration/deceleration limits
    #  acc_lim_x: 2.5
    #  acc_lim_y: 0.0
    #  acc_lim_theta: 3.2
    #  decel_lim_x: -2.5
    #  decel_lim_y: 0.0
    #  decel_lim_theta: -3.2

    # DWB sampling
    #  vx_samples: 20
    #  vy_samples: 0
    #  vtheta_samples: 40
    #  sim_time: 2.0

    # granularity
    #  linear_granularity: 0.05  
    #  angular_granularity: 0.025

    # tolerances
    #  transform_tolerance: 0.2
    #  xy_goal_tolerance: 0.10

    # stopped threshold (lowered)
    #  trans_stopped_velocity: 0.1
    #  short_circuit_trajectory_evaluation: True
    #  stateful: True

    # critic order matters: try path‚Äêfirst then rotation
    #  critics: ["PathAlign","PathDist","GoalDist", "GoalAlign", "BaseObstacle","Oscillation","RotateToGoal"]

    #  BaseObstacle.scale: 0.02
    #  PathAlign.scale: 32.0
    #  PathAlign.forward_point_distance: 0.1
    #  GoalAlign.scale: 24.0
    #  GoalAlign.forward_point_distance: 0.1
    #  PathDist.scale: 32.0
    #  GoalDist.scale: 24.0
    #  RotateToGoal.scale: 20.0
    #  RotateToGoal.slowing_factor: 10.0
    #  RotateToGoal.lookahead_time: 1.0

    # Controller 4: RPP_RSC
    #FollowPath:
    #  plugin: "nav2_rotation_shim_controller::RotationShimController"
    #  primary_controller: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
    #  debug_trajectory_details: True
    #  angular_dist_threshold: 0.785
    #  forward_sampling_distance: 0.5
    #  rotate_to_heading_angular_vel: 1.8
    #  max_angular_accel: 3.2
    #  simulate_ahead_time: 1.0
    #  desired_linear_vel: 0.26
    #  lookahead_dist: 0.6
    #  min_lookahead_dist: 0.3
    #  max_lookahead_dist: 0.9
    #  lookahead_time: 1.5
    #  transform_tolerance: 0.1 #0.2
    #  use_velocity_scaled_lookahead_dist: false
    #  min_approach_linear_velocity: 0.05
    #  approach_velocity_scaling_dist: 0.6
    #  use_collision_detection: true
    #  max_allowed_time_to_collision_up_to_carrot: 1.0
    #  use_regulated_linear_velocity_scaling: true
    #  use_cost_regulated_linear_velocity_scaling: false
    #  regulated_linear_scaling_min_radius: 0.9
    #  regulated_linear_scaling_min_speed: 0.18
    #  use_fixed_curvature_lookahead: false
    #  curvature_lookahead_dist: 1.0
    #  use_rotate_to_heading: true
    #  allow_reversing: false
    #  rotate_to_heading_min_angle: 0.785
    #  max_robot_pose_search_dist: 10.0
    #  cost_scaling_dist: 0.3
    #  cost_scaling_gain: 1.0
    #  inflation_cost_scaling_factor: 10.0
    #  use_interpolation: false

    # MPPI parameters, default controller is DWB above
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      ax_max: 3.0
      ax_min: -3.0
      ay_max: 3.0
      az_max: 3.5
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 0.5
      vx_min: -0.35
      vy_max: 0.5
      wz_max: 1.9
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 0.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: true
      regenerate_noises: true
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.2
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.5
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.5
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 1.0
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.5
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 1.4
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.5
        max_angle_to_furthest: 1.0
        mode: 0
      TwirlingCritic:
        enabled: true
        twirling_cost_power: 1
        twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.70
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.7
      always_send_full_costmap: True


planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    # planner_plugins: ["NavFn", "smac_planner", "ThetaStar","Lattice", "SmacHybraid"]

    costmap_update_timeout: 1.0
    
    # Planner 1: NavFn
    NavFn:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
      
# Planner 2: smac_planner
    smac_planner:
      plugin: "nav2_smac_planner::SmacPlanner2D"
      tolerance: 0.5
      downsample_costmap: false
      downsampling_factor: 1
      allow_unknown: true
      max_iterations: 1000000
      max_on_approach_iterations: 1000
      max_planning_time: 2.0
      cost_travel_multiplier: 2.0
      use_final_approach_orientation: false
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 0.0000000001
    ThetaStar:
      plugin: "nav2_theta_star_planner::ThetaStarPlanner"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
      w_heuristic_cost: 1.0   

    Lattice:
      plugin: "nav2_smac_planner::SmacPlannerLattice"
      allow_unknown: true
      tolerance: 0.5
      max_iterations: 1000000
      max_on_approach_iterations: 1000
      max_planning_time: 2.0
      analytic_expansion_ratio: 3.5
      analytic_expansion_max_length: 3.0
      reverse_penalty: 2.0
      change_penalty: 0.05
      non_straight_penalty: 1.05
      cost_penalty: 2.0
      rotation_penalty: 0.001
      retrospective_penalty: 0.015
      lattice_filepath: "/home/nomeer/NoMeEr/Robotics-Software/ros2/Projects/nav2bench/src/nav2bench/config/output.json"   
      lookup_table_size: 20.0
      cache_obstacle_heuristic: false
      allow_reverse_expansion: false
      smooth_path: True
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 0.0000000001
        do_refinement: true
        refinement_num: 2    

    SmacHybraid:
      plugin: "nav2_smac_planner::SmacPlannerHybrid"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
      analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
      minimum_turning_radius: 0.40        # minimum turning radius in m of path / vehicle
      reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      debug_visualizations: false         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      use_quadratic_cost_penalty: False
      downsample_obstacle_heuristic: True
      allow_primitive_interpolation: False
      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: true
        refinement_num: 2

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "/local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_footprint"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15

